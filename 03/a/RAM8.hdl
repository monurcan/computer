// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then
 * the in value is loaded into the memory location specified by address
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    Register (in=in,load=load0,out=out0);
    Register (in=in,load=load1,out=out1);
    Register (in=in,load=load2,out=out2);
    Register (in=in,load=load3,out=out3);
    Register (in=in,load=load4,out=out4);
    Register (in=in,load=load5,out=out5);
    Register (in=in,load=load6,out=out6);
    Register (in=in,load=load7,out=out7);

    Mux8Way16 (a=out0, b=out1, c=out2, d=out3, e=out4, f=out5, g=out6, h=out7, sel=address, out=out);
    DMux8Way (in=load, sel=address, a=load0, b=load1, c=load2, d=load3, e=load4, f=load5, g=load6, h=load7);

/*    Mux16 (a=out0, b=out1, sel=address[0], out=outt0);
    Mux16 (a=out2, b=out3, sel=address[0], out=outt1);
    Mux16 (a=out4, b=out5, sel=address[0], out=outt2);
    Mux16 (a=out6, b=out7, sel=address[0], out=outt3);

    Mux16 (a=outt0, b=outt1, sel=address[1], out=outtt0);
    Mux16 (a=outt2, b=outt3, sel=address[1], out=outtt1);

    Mux16 (a=outtt0, b=outtt1, sel=address[2], out=out);

    DMux(in=load, sel=address[2], a=d0, b=d1);

    DMux(in=d0, sel=address[1], a=dd0, b=dd1);
    DMux(in=d1, sel=address[1], a=dd2, b=dd3);

    DMux(in=dd0, sel=address[0], a=load0, b=load1);
    DMux(in=dd1, sel=address[0], a=load2, b=load3);
    DMux(in=dd2, sel=address[0], a=load4, b=load5);
    DMux(in=dd3, sel=address[0], a=load6, b=load7); */
}
