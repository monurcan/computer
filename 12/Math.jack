// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while(i<16){
            let twoToThe[i] = twoToThe[i-1]+twoToThe[i-1];
            let i = i+1;
        }
        return;
    }

    function boolean bit(int x, int i){
        return (x & twoToThe[i]);
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x > 0){
            return x;
        }else {
            return -x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedx, i;
        let sum = 0;
        let shiftedx = x;
        let i = 0;
        while(i<16){
            if(Math.bit(y, i)){
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx+shiftedx;
            let i = i+1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int absy, absx, q;
        let absy = Math.abs(y);
        let absx = Math.abs(x);
        let q = Math.divide_helper(absx, absy);
        if( ((x<0)&(y>0))|((y<0)&(x>0))  ){
            return -q;
        }else {
            return q;
        }
    }

    function int divide_helper(int absx, int absy){
        var int q;
        if((absy>absx) | (absy<0)){
            return 0;
        }
        let q = Math.divide_helper(absx, absy+absy);
        if((absx-((q+q)*absy))<absy){
            return q+q;
        }else {
            return (q+q+1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,square;
        let y = 0;
        let j = 7;
        while(~(j<0)){
            let square = (y+twoToThe[j])*(y+twoToThe[j]);
            if((~(square > x))&(square>0)){
                let y = y + twoToThe[j];
            }
            let j=j-1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b){
            return a;
        }else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a > b){
            return b;
        }else {
            return a;
        }
    }
}
