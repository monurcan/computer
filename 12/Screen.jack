// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i;
        let color = true;
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let i = 1;
        while(i<16){
            let twoToThe[i] = twoToThe[i-1]+twoToThe[i-1];
            let i = i+1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int addr, val, i;
        if(color){
            let val = 0;
        }else {
            let val = -1;
        }

        let i = 16384;
        while(i<24576){
            do Memory.poke(i, val);
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int addr, val;
        let addr = 16384+(y*32)+(x/16);
        let val = Memory.peek(addr);
        
        if(color){
            let val = val | (twoToThe[x&15]);
        }else {
            let val = val & ~(twoToThe[x&15]);
        }

        do Memory.poke(addr, val);
        return;
    }

    function void drawHorizontalLine(int x1, int y1, int mustbeChanged) {
        var int addr, val;
        if(mustbeChanged=0){return;}
        let addr = 16384+(y1*32)+(x1/16);
        
        let val = Memory.peek(addr);
        if(color){
            let val = val | ~(twoToThe[x1&15]-1);
        }else {
            let val = val & (twoToThe[x1&15]-1);
        }
        do Memory.poke(addr, val);   
        let addr = addr + 1;
        let mustbeChanged = mustbeChanged - 16 + (x1&15);

        while(mustbeChanged > 0){
            if(mustbeChanged < 16){
                let val = Memory.peek(addr);
                if(color){
                    let val = val | (twoToThe[mustbeChanged]-1);
                }else {
                    let val = val & ~(twoToThe[mustbeChanged]-1);
                }
            }else {
                if(color){
                    let val = -1;
                }else {
                    let val = 0;
                }
            }

            do Memory.poke(addr, val);
            let addr = addr + 1;
            let mustbeChanged = mustbeChanged - 16;
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, a, b, diff, dx, dy, sgndx, sgndy, sgndy_sgndx, sgndx_dy, sgndy_dx;

        if(y1=y2){
            if(x1>x2){
                do Screen.drawHorizontalLine(x2, y1, x1-x2+1);
            }else {
                do Screen.drawHorizontalLine(x1, y1, x2-x1+1);
            }
            return;
        }
        
        let x = x1;
        let y = y1;
        let dx = x2-x1;
        let dy = y2-y1;
        if(dx>0){
            let sgndx = 1;
        }else {
            let sgndx = -1;
        }
        if(dy>0){
            let sgndy = 1;
        }else {
            let sgndy = -1;
        }
        let a = 0;
        let b = 0;
        let diff = 0;
        let sgndy_sgndx = sgndy*sgndx;
        let sgndx_dy = sgndx*dy;
        let sgndy_dx = sgndy*dx;

        while(~(Math.abs(a)>Math.abs(dx))&~(Math.abs(b)>Math.abs(dy))){
            do Screen.drawPixel(x+a,y+b);
            if((diff*sgndy_sgndx) < 0){
                let a = a+sgndx;
                let diff = diff+sgndx_dy;
            }else {
                let b = b+sgndy;
                let diff = diff-sgndy_dx;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x, y, last_y, length;
        if(x1>x2){
            let x = x2;
            let length = x1-x2+1;
        }else {
            let x = x1;
            let length = x2-x1+1;
        }

        if(y1>y2){
            let y = y2;
            let last_y = y1;
        }else {
            let y = y1;
            let last_y = y2;
        }

        while(y<last_y){
            do Screen.drawHorizontalLine(x, y, length);
            let y = y+1;
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy,dx;
        let dy = -r;
        while(dy<r){
            let dx=Math.sqrt((r*r)-(dy*dy));
            do Screen.drawHorizontalLine(x-dx, y+dy, dx+dx);
        }
        return;
    }
}
